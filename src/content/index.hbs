---
about: true
---

<h2>Hello nerds.</h2>
<h2>
  Fortune is a framework for prototyping hypermedia APIs that implement the <a href="//jsonapi.org">JSON API</a> specification. It comes with a modular persistence layer, with adapters for <a href="//github.com/louischatriot/nedb">NeDB</a> (built-in), <a href="//github.com/daliwali/fortune-mongodb">MongoDB</a>, <a href="//github.com/daliwali/fortune-relational">MySQL</a>, <a href="//github.com/daliwali/fortune-relational">Postgres</a>, &amp; <a href="//github.com/daliwali/fortune-relational">SQLite</a>. See <a href="guide/">guide</a> for how to use.
</h2>
<hr>
<p>Current version is <b>{{package.version}}</b>. Get it by installing from <code>npm</code>:</p>
<div class="get">
  <code>npm install fortune</code>
  <a href="https://github.com/daliwali/fortune/archive/master.zip">
    <span class="fa fa-download"></span>
    <span>Download .zip</span>
  </a>
</div>
<hr>

<h3>Basic Usage</h3>
<p>Here is a minimal application that exposes two resources that can link to each other:</p>
{{#markdown}}
```javascript
var fortune = require('fortune')
  , app = fortune({
    db: 'petstore'
  })
  .resource('person', {
    name: String,
    age: Number,
    pets: ['pet'] // "has many" relationship to pets
  })

  .resource('pet', {
    name: String,
    age: Number,
    owner: 'person' // "belongs to" relationship to a person
  })

  .listen(1337);
```
{{/markdown}}
<p>This exposes a few routes for the <code>person</code> and <code>pet</code> resources:</p>

<div class="table-container">
  <table>
    <thead><tr>
    <th>HTTP</th>
    <th>Person</th>
    <th>Pet</th>
    <th>Notes</th>
    </tr></thead>
    <tbody>
    <tr>
    <td><code>GET</code></td>
    <td>/people</td>
    <td>/pets</td>
    <td>Get a collection of resources, accepts query <code>?ids=1,2,3...</code>
    </td>
    </tr>
    <tr>
    <td><code>POST</code></td>
    <td>/people</td>
    <td>/pets</td>
    <td>Create a resource</td>
    </tr>
    <tr>
    <td><code>GET</code></td>
    <td>/people/<code>:id</code>
    </td>
    <td>/pets/<code>:id</code>
    </td>
    <td>Get a specific resource, or multiple: <code>1,2,3</code>
    </td>
    </tr>
    <tr>
    <td><code>PUT</code></td>
    <td>/people/<code>:id</code>
    </td>
    <td>/pets/<code>:id</code>
    </td>
    <td>Create or update a resource</td>
    </tr>
    <tr>
    <td><code>PATCH</code></td>
    <td>/people/<code>:id</code>
    </td>
    <td>/pets/<code>:id</code>
    </td>
    <td>Patch a resource (see <a href="http://tools.ietf.org/html/rfc6902">RFC 6902</a>)</td>
    </tr>
    <tr>
    <td><code>DELETE</code></td>
    <td>/people/<code>:id</code>
    </td>
    <td>/pets/<code>:id</code>
    </td>
    <td>Delete a resource</td>
    </tr>
    <tr>
    <td><code>GET</code></td>
    <td>/people/<code>:id</code>/pets</td>
    <td>/pets/<code>:id</code>/owner</td>
    <td>Get a related resource (one level deep)</td>
    </tr>
    </tbody>
  </table>
</div>

<p>Please consult the <a href="http://jsonapi.org">JSON API</a> specification for what the request and response should look like. Read the <a href="guide/">guide</a> for an overview, or the <a href="docs/">documentation</a> if you feel like diving in.</p>

<hr>
<div class="feature">
  <p>
    <span class="fa fa-coffee"></span>
    Batteries included, Fortune handles routing and database interactions so you don't have to.
  </p>
</div>
<div class="feature">
  <p>
    <span class="fa fa-exchange"></span>
    Serializers and deserializers for JSON API, and other hypermedia formats (in the future).
  </p>
</div>
<div class="feature">
  <p>
    <span class="fa fa-cogs"></span>
    Hooks to implement application specific logic before/after interacting with resources.
  </p>
</div>
<div class="clear"></div>