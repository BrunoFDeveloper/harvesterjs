[
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "options",
        "description": ""
      },
      {
        "type": "constructor",
        "string": ""
      }
    ],
    "description": {
      "full": "<p>Adapter for persistence layers. Adapters must implement a<br />private <code>_init</code> method, as well as a few methods that are<br />accessed publicly:</p>\n\n<div class=\"highlight\"><pre lang=\"\">schema, model, create, update, delete, find, findMany\n</pre></div>",
      "summary": "<p>Adapter for persistence layers. Adapters must implement a<br />private <code>_init</code> method, as well as a few methods that are<br />accessed publicly:</p>",
      "body": "<div class=\"highlight\"><pre lang=\"\">schema, model, create, update, delete, find, findMany\n</pre></div>"
    },
    "isPrivate": false,
    "ignore": true,
    "code": "function Adapter(options) {\n  var key, methods = {};\n  if(options.adapter) {\n    if(typeof options.adapter == 'string' && !!adapters[options.adapter]) {\n      methods = require(adapters[options.adapter]);\n    } else if(typeof options.adapter == 'object') {\n      methods = options.adapter;\n    }\n    for(key in methods) {\n      this[key] = methods[key];\n    }\n  } else {\n    throw new Error('Missing or invalid database adapter.');\n  }\n  this._init(options);\n}",
    "ctx": {
      "type": "function",
      "name": "Adapter",
      "string": "Adapter()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Constructor method.</p>",
      "summary": "<p>Constructor method.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Adapter.prototype._init = function() {};",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "_init",
      "string": "Adapter.prototype._init()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": "the name of the resource"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "schema",
        "description": "an object in the Fortune schema format"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[options]",
        "description": "optional schema options to pass to the adapter"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Transform fortune schema into a schema or model of the underlying adapter. Although this method is actually called from another module, it should not be called manually, so it is marked as private.</p>",
      "summary": "<p>Transform fortune schema into a schema or model of the underlying adapter. Although this method is actually called from another module, it should not be called manually, so it is marked as private.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Adapter.prototype.schema = function() {};",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "schema",
      "string": "Adapter.prototype.schema()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": "the name of the resource"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[schema]",
        "description": "if no schema is passed, this returns a model with the corresponding name"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Set up the underlying model. If no schema is passed, it returns an existing model. Although this method is actually called from another module, it should not be called manually, so it is marked as private.</p>",
      "summary": "<p>Set up the underlying model. If no schema is passed, it returns an existing model. Although this method is actually called from another module, it should not be called manually, so it is marked as private.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Adapter.prototype.model = function() {};",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "model",
      "string": "Adapter.prototype.model()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "model",
        "description": "either a string or the underlying model"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "[id]",
        "description": "the resource ID"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "resource",
        "description": "a single resource in JSON API format"
      },
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Create a resource, with an optional ID.</p>",
      "summary": "<p>Create a resource, with an optional ID.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.create = function() { return stubPromise(); };",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "create",
      "string": "Adapter.prototype.create()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "model",
        "description": "either a string or the underlying model"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "id",
        "description": "the resource ID"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "update",
        "description": "a partial resource in JSON API format"
      },
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Update a resource by ID.</p>",
      "summary": "<p>Update a resource by ID.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.update = function() { return stubPromise(); };",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "update",
      "string": "Adapter.prototype.update()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "model",
        "description": "either a string or the underlying model"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "id",
        "description": "the resource ID"
      },
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Delete a resource by ID.</p>",
      "summary": "<p>Delete a resource by ID.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.delete = function() { return stubPromise(); };",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "delete",
      "string": "Adapter.prototype.delete()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "model",
        "description": "if the model is a string, it looks up the model based it's name"
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "query",
        "description": "if the query is a string, then it is assumed that it's the ID"
      },
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Find a single resource by ID or arbitrary query.</p>",
      "summary": "<p>Find a single resource by ID or arbitrary query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.find = function() { return stubPromise(); };",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "find",
      "string": "Adapter.prototype.find()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "model",
        "description": "either a string or the underlying model"
      },
      {
        "type": "param",
        "types": [
          "Array",
          "Object"
        ],
        "name": "query",
        "description": "either an array of IDs, or a query object"
      },
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "[limit]",
        "description": "limit the number of resources to send back. Default: 1,000"
      },
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Find multiple resources by IDs or an arbitrary query.</p>",
      "summary": "<p>Find multiple resources by IDs or an arbitrary query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.findMany = function() { return stubPromise(); };",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "findMany",
      "string": "Adapter.prototype.findMany()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Promise"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Sometimes we need to wait for the database connection first.<br />This is a stub method that should return a promise, and it should<br />only be implemented if the need arises.</p>",
      "summary": "<p>Sometimes we need to wait for the database connection first.<br />This is a stub method that should return a promise, and it should<br />only be implemented if the need arises.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Adapter.prototype.awaitConnection = function() { return stubPromise(true); };\n\n\nfunction stubPromise(silent) {\n  if(!silent) console.warn('Warning: method not implemented.');\n  return new RSVP.Promise(function(resolve) {\n    resolve();\n  });\n}\n\nexports = module.exports = Adapter;\nexports.adapters = adapters;",
    "ctx": {
      "type": "method",
      "constructor": "Adapter",
      "cons": "Adapter",
      "name": "awaitConnection",
      "string": "Adapter.prototype.awaitConnection()"
    }
  }
]