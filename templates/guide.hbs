---
title: Guide
guide: true
---

{{#markdown}}
## Getting started with Fortune.js: this guide assumes that you already have [node.js](http://nodejs.org) installed on your system.
---
Fortune is a web framework for prototyping rich hypermedia APIs. What does that mean? A few things: interactions with the API are oriented around manipulating resources, there are types of manipulations that take the form of HTTP verbs, and the resources link to each other in a standardized, discoverable way (this concept is called [Hypertext As The Engine Of Application State](http://en.wikipedia.org/wiki/HATEOAS), or *HATEOAS* for short).

Fortune is not a MVC framework, in the sense that there are no views or controllers to define. The "view" is simply a JSON response specified by the [JSON API](http://jsonapi.org) specification. Controllers can be thought of as the *before* and *after* transformations on a resource. 

Let's get started by defining our application:

```javascript
var fortune = require('fortune');
var options = {
  db: 'demo_app'
};
var app = fortune(options);
```

*Note: the `options` object is [explained in detail in the documentation](/docs/#options).*

---

### Defining Resources

Resources are the core of a Fortune application. Defining a resource sets up an underlying model in the adapter, and assigns routes to manipulate the resource at the same time.

```javascript
app.resource('user', {
  name: String,
  salt: Buffer,
  password: Buffer
});
```

*Note: an example of a secure application is located at [examples/keystore.js](//github.com/daliwali/fortune/blob/master/examples/keystore.js).*

The routes to `GET` and `POST` the collection of users, and to `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` an individual user are set up under `/users` and `/users/:id` respectively (note the pluralization of "user"). Unsafe operations, such as replacing or deleting a collection, are not allowed. Additionally, a resource can be marked as [read-only](/docs/#readOnly) or [not having a collection index](/docs/#noIndex).

---

### Defining Associations Between Resources

Resources may be associated with another, like so:

```javascript
app.resource('person', {
  name: String,
  spouse: {ref: 'person', inverse: 'spouse'},
  lovers: [{ref: 'person', inverse: 'lovers'}]
});
```

*Note: the schema definition is [explained in the documentation](/docs/#resource).*

In this example, `spouse` is a one-to-one relationship, while `lovers` is a many-to-many relationship. The array syntax indicates whether there are many associations. Associations are assumed to be bi-directional, so a `person` cannot have a `spouse` that does not reciprocate.

---

### Before and After Transformations on Resources

Resources have two hooks for application-specific logic: `before` and `after`. *Before* is called when the API receives a request to write to the database, and *after* is called when the API receives a request to read from the database. Transformations do not affect calling methods on the `adapter` directly.

Suppose that we do not wish to reveal a `person`'s `lovers`:

```javascript
app.after('person', function(resolve) {
  delete this.links.lovers;
  resolve(this);
});
```

The callback function is called within the context of the resource, and it takes three arguments (only one is needed for this example): a function to resolve the resource, a function to reject the resource, and the request object. There is also a convenience method, *[transform](/docs/#transform)*, which defines both before & after simultaneously.

---

### Adapter Methods and Advanced Usage

The database adapter can be called directly, see the [documentation](/docs/) for details.

Fortune uses `express` as a router, which can be extended by [using](/docs/#use) `connect` middleware, or by accessing the `router` namespace of Fortune.

{{/markdown}}
